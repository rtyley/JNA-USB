package libusbone;
/**
 * <i>native declaration : /usr/include/sys/select.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class fd_set extends com.sun.jna.Structure {
	/// C type : __fd_mask[1024 / (8 * sizeof(__fd_mask))]
	public int[] __fds_bits = new int[(1024 / (8 * 4))];
	public fd_set() {
		super();
	}
	/// @param __fds_bits C type : __fd_mask[1024 / (8 * sizeof(__fd_mask))]
	public fd_set(int __fds_bits[]) {
		super();
		if (__fds_bits.length != this.__fds_bits.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.__fds_bits = __fds_bits;
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected fd_set newInstance() {
		fd_set s = new fd_set();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends fd_set implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends fd_set implements com.sun.jna.Structure.ByValue {}
}
