package libusbone;
/**
 * \ingroup desc<br>
 * A structure representing the standard USB configuration descriptor. This<br>
 * descriptor is documented in section 9.6.3 of the USB 2.0 specification.<br>
 * All multiple-byte fields are represented in host-endian format.<br>
 * <i>native declaration : /usr/include/limits.h:542</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class libusb_config_descriptor extends com.sun.jna.Structure {
	/// Size of this descriptor (in bytes)
	public byte bLength;
	/**
	 * Descriptor type. Will have value<br>
	 * \ref libusb_descriptor_type::LIBUSB_DT_CONFIG LIBUSB_DT_CONFIG<br>
	 * in this context.
	 */
	public byte bDescriptorType;
	/// Total length of data returned for this configuration
	public short wTotalLength;
	/// Number of interfaces supported by this configuration
	public byte bNumInterfaces;
	/// Identifier value for this configuration
	public byte bConfigurationValue;
	/// Index of string descriptor describing this configuration
	public byte iConfiguration;
	/// Configuration characteristics
	public byte bmAttributes;
	/**
	 * Maximum power consumption of the USB device from this bus in this<br>
	 * configuration when the device is fully opreation. Expressed in units<br>
	 * of 2 mA.
	 */
	public byte MaxPower;
	/**
	 * Array of interfaces supported by this configuration. The length of<br>
	 * this array is determined by the bNumInterfaces field.<br>
	 * C type : libusb_interface*
	 */
	public libusbone.libusb_interface.ByReference interface_;
	/**
	 * Extra descriptors. If libusb encounters unknown configuration<br>
	 * descriptors, it will store them here, should you wish to parse them.<br>
	 * C type : const unsigned char*
	 */
	public com.sun.jna.Pointer extra;
	/// Length of the extra descriptors, in bytes.
	public int extra_length;
	public libusb_config_descriptor() {
		super();
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected libusb_config_descriptor newInstance() {
		libusb_config_descriptor s = new libusb_config_descriptor();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends libusb_config_descriptor implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends libusb_config_descriptor implements com.sun.jna.Structure.ByValue {}
}
