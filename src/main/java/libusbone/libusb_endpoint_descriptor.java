package libusbone;
/**
 * \ingroup desc<br>
 * A structure representing the standard USB endpoint descriptor. This<br>
 * descriptor is documented in section 9.6.3 of the USB 2.0 specification.<br>
 * All multiple-byte fields are represented in host-endian format.<br>
 * <i>native declaration : /usr/include/limits.h:323</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class libusb_endpoint_descriptor extends com.sun.jna.Structure {
	/// Size of this descriptor (in bytes)
	public byte bLength;
	/**
	 * Descriptor type. Will have value<br>
	 * \ref libusb_descriptor_type::LIBUSB_DT_ENDPOINT LIBUSB_DT_ENDPOINT in<br>
	 * this context.
	 */
	public byte bDescriptorType;
	/**
	 * The address of the endpoint described by this descriptor. Bits 0:3 are<br>
	 * the endpoint number. Bits 4:6 are reserved. Bit 7 indicates direction,<br>
	 * see \ref libusb_endpoint_direction.
	 */
	public byte bEndpointAddress;
	/**
	 * Attributes which apply to the endpoint when it is configured using<br>
	 * the bConfigurationValue. Bits 0:1 determine the transfer type and<br>
	 * correspond to \ref libusb_transfer_type. Bits 2:3 are only used for<br>
	 * isochronous endpoints and correspond to \ref libusb_iso_sync_type.<br>
	 * Bits 4:5 are also only used for isochronous endpoints and correspond to<br>
	 * \ref libusb_iso_usage_type. Bits 6:7 are reserved.
	 */
	public byte bmAttributes;
	/// Maximum packet size this endpoint is capable of sending/receiving.
	public short wMaxPacketSize;
	/// Interval for polling endpoint for data transfers.
	public byte bInterval;
	/**
	 * For audio devices only: the rate at which synchronization feedback<br>
	 * is provided.
	 */
	public byte bRefresh;
	/// For audio devices only: the address if the synch endpoint
	public byte bSynchAddress;
	/**
	 * Extra descriptors. If libusb encounters unknown endpoint descriptors,<br>
	 * it will store them here, should you wish to parse them.<br>
	 * C type : const unsigned char*
	 */
	public com.sun.jna.Pointer extra;
	/// Length of the extra descriptors, in bytes.
	public int extra_length;
	public libusb_endpoint_descriptor() {
		super();
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected libusb_endpoint_descriptor newInstance() {
		libusb_endpoint_descriptor s = new libusb_endpoint_descriptor();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends libusb_endpoint_descriptor implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends libusb_endpoint_descriptor implements com.sun.jna.Structure.ByValue {}
}
