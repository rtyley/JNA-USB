package libusbone;
/**
 * <i>native declaration : /usr/include/bits/types.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class __fsid_t extends com.sun.jna.Structure {
	/**
	 * Type of file system IDs.<br>
	 * C type : int[2]
	 */
	public int[] __val = new int[(2)];
	public __fsid_t() {
		super();
	}
	/**
	 * @param __val Type of file system IDs.<br>
	 * C type : int[2]
	 */
	public __fsid_t(int __val[]) {
		super();
		if (__val.length != this.__val.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.__val = __val;
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected __fsid_t newInstance() {
		__fsid_t s = new __fsid_t();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends __fsid_t implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends __fsid_t implements com.sun.jna.Structure.ByValue {}
}
