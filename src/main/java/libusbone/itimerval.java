package libusbone;
/**
 * Type of the second argument to `getitimer' and<br>
 * the second and third arguments `setitimer'.<br>
 * <i>native declaration : /usr/include/sys/time.h:106</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class itimerval extends com.sun.jna.Structure {
	/**
	 * Value to put into `it_value' when the timer expires.<br>
	 * C type : timeval
	 */
	public libusbone.timeval it_interval;
	/**
	 * Time to the next timer expiration.<br>
	 * C type : timeval
	 */
	public libusbone.timeval it_value;
	public itimerval() {
		super();
	}
	/**
	 * @param it_interval Value to put into `it_value' when the timer expires.<br>
	 * C type : timeval<br>
	 * @param it_value Time to the next timer expiration.<br>
	 * C type : timeval
	 */
	public itimerval(libusbone.timeval it_interval, libusbone.timeval it_value) {
		super();
		this.it_interval = it_interval;
		this.it_value = it_value;
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected itimerval newInstance() {
		itimerval s = new itimerval();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends itimerval implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends itimerval implements com.sun.jna.Structure.ByValue {}
}
