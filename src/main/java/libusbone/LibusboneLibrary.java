package libusbone;
/**
 * JNA Wrapper for library <b>libusbone</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibusboneLibrary extends com.sun.jna.Library {
//	public static final java.lang.String JNA_LIBRARY_NAME = com.ochafik.lang.jnaerator.runtime.LibraryExtractor.getLibraryPath("libusbone", true, libusbone.LibusboneLibrary.class);
//	public static final com.sun.jna.NativeLibrary JNA_NATIVE_LIB = com.sun.jna.NativeLibrary.getInstance(libusbone.LibusboneLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
//	
	
	
	//public static final libusbone.LibusboneLibrary INSTANCE = (libusbone.LibusboneLibrary)com.sun.jna.Native.loadLibrary(libusbone.LibusboneLibrary.JNA_LIBRARY_NAME, libusbone.LibusboneLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final libusbone.LibusboneLibrary INSTANCE = (libusbone.LibusboneLibrary)com.sun.jna.Native.loadLibrary("libusb-1.0", libusbone.LibusboneLibrary.class);
	
	
	/**
	 * \ingroup desc<br>
	 * Device and/or Interface Class codes<br>
	 * <i>native declaration : /usr/include/limits.h:39</i><br>
	 * enum values
	 */
	public static interface libusb_class_code {
		/**
		 * In the context of a \ref libusb_device_descriptor "device descriptor",<br>
		 * this bDeviceClass value indicates that each interface specifies its<br>
		 * own class information and all interfaces operate independently.<br>
		 * In the context of a \ref libusb_device_descriptor "device descriptor",<br>
		 * this bDeviceClass value indicates that each interface specifies its<br>
		 * own class information and all interfaces operate independently.<br>
		 * <i>native declaration : /usr/include/limits.h:44</i>
		 */
		public static final int LIBUSB_CLASS_PER_INTERFACE = 0;
		/**
		 * Audio class<br>
		 * Audio class<br>
		 * <i>native declaration : /usr/include/limits.h:47</i>
		 */
		public static final int LIBUSB_CLASS_AUDIO = 1;
		/**
		 * Communications class<br>
		 * Communications class<br>
		 * <i>native declaration : /usr/include/limits.h:50</i>
		 */
		public static final int LIBUSB_CLASS_COMM = 2;
		/**
		 * Human Interface Device class<br>
		 * Human Interface Device class<br>
		 * <i>native declaration : /usr/include/limits.h:53</i>
		 */
		public static final int LIBUSB_CLASS_HID = 3;
		/**
		 * Printer dclass<br>
		 * Printer dclass<br>
		 * <i>native declaration : /usr/include/limits.h:56</i>
		 */
		public static final int LIBUSB_CLASS_PRINTER = 7;
		/**
		 * Picture transfer protocol class<br>
		 * Picture transfer protocol class<br>
		 * <i>native declaration : /usr/include/limits.h:59</i>
		 */
		public static final int LIBUSB_CLASS_PTP = 6;
		/**
		 * Mass storage class<br>
		 * Mass storage class<br>
		 * <i>native declaration : /usr/include/limits.h:62</i>
		 */
		public static final int LIBUSB_CLASS_MASS_STORAGE = 8;
		/**
		 * Hub class<br>
		 * Hub class<br>
		 * <i>native declaration : /usr/include/limits.h:65</i>
		 */
		public static final int LIBUSB_CLASS_HUB = 9;
		/**
		 * Data class<br>
		 * Data class<br>
		 * <i>native declaration : /usr/include/limits.h:68</i>
		 */
		public static final int LIBUSB_CLASS_DATA = 10;
		/**
		 * Class is vendor-specific<br>
		 * Class is vendor-specific<br>
		 * <i>native declaration : /usr/include/limits.h:71</i>
		 */
		public static final int LIBUSB_CLASS_VENDOR_SPEC = 255;
	}
	/**
	 * \ingroup desc<br>
	 * Descriptor types as defined by the USB specification.<br>
	 * <i>native declaration : /usr/include/limits.h:76</i><br>
	 * enum values
	 */
	public static interface libusb_descriptor_type {
		/**
		 * Device descriptor. See libusb_device_descriptor.<br>
		 * Device descriptor. See libusb_device_descriptor.<br>
		 * <i>native declaration : /usr/include/limits.h:78</i>
		 */
		public static final int LIBUSB_DT_DEVICE = 1;
		/**
		 * Configuration descriptor. See libusb_config_descriptor.<br>
		 * Configuration descriptor. See libusb_config_descriptor.<br>
		 * <i>native declaration : /usr/include/limits.h:81</i>
		 */
		public static final int LIBUSB_DT_CONFIG = 2;
		/**
		 * String descriptor<br>
		 * String descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:84</i>
		 */
		public static final int LIBUSB_DT_STRING = 3;
		/**
		 * Interface descriptor. See libusb_interface_descriptor.<br>
		 * Interface descriptor. See libusb_interface_descriptor.<br>
		 * <i>native declaration : /usr/include/limits.h:87</i>
		 */
		public static final int LIBUSB_DT_INTERFACE = 4;
		/**
		 * Endpoint descriptor. See libusb_endpoint_descriptor.<br>
		 * Endpoint descriptor. See libusb_endpoint_descriptor.<br>
		 * <i>native declaration : /usr/include/limits.h:90</i>
		 */
		public static final int LIBUSB_DT_ENDPOINT = 5;
		/**
		 * HID descriptor<br>
		 * HID descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:93</i>
		 */
		public static final int LIBUSB_DT_HID = 33;
		/**
		 * HID report descriptor<br>
		 * HID report descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:96</i>
		 */
		public static final int LIBUSB_DT_REPORT = 34;
		/**
		 * Physical descriptor<br>
		 * Physical descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:99</i>
		 */
		public static final int LIBUSB_DT_PHYSICAL = 35;
		/**
		 * Hub descriptor<br>
		 * Hub descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:102</i>
		 */
		public static final int LIBUSB_DT_HUB = 41;
	}
	/**
	 * \ingroup desc<br>
	 * Endpoint direction. Values for bit 7 of the<br>
	 * \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.<br>
	 * <i>native declaration : /usr/include/limits.h:120</i><br>
	 * enum values
	 */
	public static interface libusb_endpoint_direction {
		/**
		 * In: device-to-host<br>
		 * In: device-to-host<br>
		 * <i>native declaration : /usr/include/limits.h:122</i>
		 */
		public static final int LIBUSB_ENDPOINT_IN = 128;
		/**
		 * Out: host-to-device<br>
		 * Out: host-to-device<br>
		 * <i>native declaration : /usr/include/limits.h:125</i>
		 */
		public static final int LIBUSB_ENDPOINT_OUT = 0;
	}
	/**
	 * \ingroup desc<br>
	 * Endpoint transfer type. Values for bits 0:1 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.<br>
	 * <i>native declaration : /usr/include/limits.h:134</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_type {
		/**
		 * Control endpoint<br>
		 * Control endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:136</i>
		 */
		public static final int LIBUSB_TRANSFER_TYPE_CONTROL = 0;
		/**
		 * Isochronous endpoint<br>
		 * Isochronous endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:139</i>
		 */
		public static final int LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1;
		/**
		 * Bulk endpoint<br>
		 * Bulk endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:142</i>
		 */
		public static final int LIBUSB_TRANSFER_TYPE_BULK = 2;
		/**
		 * Interrupt endpoint<br>
		 * Interrupt endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:145</i>
		 */
		public static final int LIBUSB_TRANSFER_TYPE_INTERRUPT = 3;
	}
	/**
	 * \ingroup misc<br>
	 * Standard requests, as defined in table 9-3 of the USB2 specifications<br>
	 * <i>native declaration : /usr/include/limits.h:150</i><br>
	 * enum values
	 */
	public static interface libusb_standard_request {
		/**
		 * Request status of the specific recipient<br>
		 * Request status of the specific recipient<br>
		 * <i>native declaration : /usr/include/limits.h:152</i>
		 */
		public static final int LIBUSB_REQUEST_GET_STATUS = 0;
		/**
		 * Clear or disable a specific feature<br>
		 * Clear or disable a specific feature<br>
		 * <i>native declaration : /usr/include/limits.h:155</i>
		 */
		public static final int LIBUSB_REQUEST_CLEAR_FEATURE = 1;
		/**
		 * Set or enable a specific feature<br>
		 * Set or enable a specific feature<br>
		 * <i>native declaration : /usr/include/limits.h:160</i>
		 */
		public static final int LIBUSB_REQUEST_SET_FEATURE = 3;
		/**
		 * Set device address for all future accesses<br>
		 * Set device address for all future accesses<br>
		 * <i>native declaration : /usr/include/limits.h:165</i>
		 */
		public static final int LIBUSB_REQUEST_SET_ADDRESS = 5;
		/**
		 * Get the specified descriptor<br>
		 * Get the specified descriptor<br>
		 * <i>native declaration : /usr/include/limits.h:168</i>
		 */
		public static final int LIBUSB_REQUEST_GET_DESCRIPTOR = 6;
		/**
		 * Used to update existing descriptors or add new descriptors<br>
		 * Used to update existing descriptors or add new descriptors<br>
		 * <i>native declaration : /usr/include/limits.h:171</i>
		 */
		public static final int LIBUSB_REQUEST_SET_DESCRIPTOR = 7;
		/**
		 * Get the current device configuration value<br>
		 * Get the current device configuration value<br>
		 * <i>native declaration : /usr/include/limits.h:174</i>
		 */
		public static final int LIBUSB_REQUEST_GET_CONFIGURATION = 8;
		/**
		 * Set device configuration<br>
		 * Set device configuration<br>
		 * <i>native declaration : /usr/include/limits.h:177</i>
		 */
		public static final int LIBUSB_REQUEST_SET_CONFIGURATION = 9;
		/**
		 * Return the selected alternate setting for the specified interface<br>
		 * Return the selected alternate setting for the specified interface<br>
		 * <i>native declaration : /usr/include/limits.h:180</i>
		 */
		public static final int LIBUSB_REQUEST_GET_INTERFACE = 10;
		/**
		 * Select an alternate interface for the specified interface<br>
		 * Select an alternate interface for the specified interface<br>
		 * <i>native declaration : /usr/include/limits.h:183</i>
		 */
		public static final int LIBUSB_REQUEST_SET_INTERFACE = 11;
		/**
		 * Set then report an endpoint's synchronization frame<br>
		 * Set then report an endpoint's synchronization frame<br>
		 * <i>native declaration : /usr/include/limits.h:186</i>
		 */
		public static final int LIBUSB_REQUEST_SYNCH_FRAME = 12;
	}
	/**
	 * \ingroup misc<br>
	 * Request type bits of the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control<br>
	 * transfers.<br>
	 * <i>native declaration : /usr/include/limits.h:193</i><br>
	 * enum values
	 */
	public static interface libusb_request_type {
		/**
		 * Standard<br>
		 * Standard<br>
		 * <i>native declaration : /usr/include/limits.h:195</i>
		 */
		public static final int LIBUSB_REQUEST_TYPE_STANDARD = (0 << 5);
		/**
		 * Class<br>
		 * Class<br>
		 * <i>native declaration : /usr/include/limits.h:198</i>
		 */
		public static final int LIBUSB_REQUEST_TYPE_CLASS = (1 << 5);
		/**
		 * Vendor<br>
		 * Vendor<br>
		 * <i>native declaration : /usr/include/limits.h:201</i>
		 */
		public static final int LIBUSB_REQUEST_TYPE_VENDOR = (2 << 5);
		/**
		 * Reserved<br>
		 * Reserved<br>
		 * <i>native declaration : /usr/include/limits.h:204</i>
		 */
		public static final int LIBUSB_REQUEST_TYPE_RESERVED = (3 << 5);
	}
	/**
	 * \ingroup misc<br>
	 * Recipient bits of the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control<br>
	 * transfers. Values 4 through 31 are reserved.<br>
	 * <i>native declaration : /usr/include/limits.h:211</i><br>
	 * enum values
	 */
	public static interface libusb_request_recipient {
		/**
		 * Device<br>
		 * Device<br>
		 * <i>native declaration : /usr/include/limits.h:213</i>
		 */
		public static final int LIBUSB_RECIPIENT_DEVICE = 0;
		/**
		 * Interface<br>
		 * Interface<br>
		 * <i>native declaration : /usr/include/limits.h:216</i>
		 */
		public static final int LIBUSB_RECIPIENT_INTERFACE = 1;
		/**
		 * Endpoint<br>
		 * Endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:219</i>
		 */
		public static final int LIBUSB_RECIPIENT_ENDPOINT = 2;
		/**
		 * Other<br>
		 * Other<br>
		 * <i>native declaration : /usr/include/limits.h:222</i>
		 */
		public static final int LIBUSB_RECIPIENT_OTHER = 3;
	}
	/**
	 * \ingroup desc<br>
	 * Synchronization type for isochronous endpoints. Values for bits 2:3 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in<br>
	 * libusb_endpoint_descriptor.<br>
	 * <i>native declaration : /usr/include/limits.h:232</i><br>
	 * enum values
	 */
	public static interface libusb_iso_sync_type {
		/**
		 * No synchronization<br>
		 * No synchronization<br>
		 * <i>native declaration : /usr/include/limits.h:234</i>
		 */
		public static final int LIBUSB_ISO_SYNC_TYPE_NONE = 0;
		/**
		 * Asynchronous<br>
		 * Asynchronous<br>
		 * <i>native declaration : /usr/include/limits.h:237</i>
		 */
		public static final int LIBUSB_ISO_SYNC_TYPE_ASYNC = 1;
		/**
		 * Adaptive<br>
		 * Adaptive<br>
		 * <i>native declaration : /usr/include/limits.h:240</i>
		 */
		public static final int LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2;
		/**
		 * Synchronous<br>
		 * Synchronous<br>
		 * <i>native declaration : /usr/include/limits.h:243</i>
		 */
		public static final int LIBUSB_ISO_SYNC_TYPE_SYNC = 3;
	}
	/**
	 * \ingroup desc<br>
	 * Usage type for isochronous endpoints. Values for bits 4:5 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in<br>
	 * libusb_endpoint_descriptor.<br>
	 * <i>native declaration : /usr/include/limits.h:253</i><br>
	 * enum values
	 */
	public static interface libusb_iso_usage_type {
		/**
		 * Data endpoint<br>
		 * Data endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:255</i>
		 */
		public static final int LIBUSB_ISO_USAGE_TYPE_DATA = 0;
		/**
		 * Feedback endpoint<br>
		 * Feedback endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:258</i>
		 */
		public static final int LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1;
		/**
		 * Implicit feedback Data endpoint<br>
		 * Implicit feedback Data endpoint<br>
		 * <i>native declaration : /usr/include/limits.h:261</i>
		 */
		public static final int LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2;
	}
	/**
	 * \ingroup misc<br>
	 * Error codes. Most libusb functions return 0 on success or one of these<br>
	 * codes on failure.<br>
	 * <i>native declaration : /usr/include/limits.h:563</i><br>
	 * enum values
	 */
	public static interface libusb_error {
		/**
		 * Success (no error)<br>
		 * Success (no error)<br>
		 * <i>native declaration : /usr/include/limits.h:565</i>
		 */
		public static final int LIBUSB_SUCCESS = 0;
		/**
		 * Input/output error<br>
		 * Input/output error<br>
		 * <i>native declaration : /usr/include/limits.h:568</i>
		 */
		public static final int LIBUSB_ERROR_IO = -1;
		/**
		 * Invalid parameter<br>
		 * Invalid parameter<br>
		 * <i>native declaration : /usr/include/limits.h:571</i>
		 */
		public static final int LIBUSB_ERROR_INVALID_PARAM = -2;
		/**
		 * Access denied (insufficient permissions)<br>
		 * Access denied (insufficient permissions)<br>
		 * <i>native declaration : /usr/include/limits.h:574</i>
		 */
		public static final int LIBUSB_ERROR_ACCESS = -3;
		/**
		 * No such device (it may have been disconnected)<br>
		 * No such device (it may have been disconnected)<br>
		 * <i>native declaration : /usr/include/limits.h:577</i>
		 */
		public static final int LIBUSB_ERROR_NO_DEVICE = -4;
		/**
		 * Entity not found<br>
		 * Entity not found<br>
		 * <i>native declaration : /usr/include/limits.h:580</i>
		 */
		public static final int LIBUSB_ERROR_NOT_FOUND = -5;
		/**
		 * Resource busy<br>
		 * Resource busy<br>
		 * <i>native declaration : /usr/include/limits.h:583</i>
		 */
		public static final int LIBUSB_ERROR_BUSY = -6;
		/**
		 * Operation timed out<br>
		 * Operation timed out<br>
		 * <i>native declaration : /usr/include/limits.h:586</i>
		 */
		public static final int LIBUSB_ERROR_TIMEOUT = -7;
		/**
		 * Overflow<br>
		 * Overflow<br>
		 * <i>native declaration : /usr/include/limits.h:589</i>
		 */
		public static final int LIBUSB_ERROR_OVERFLOW = -8;
		/**
		 * Pipe error<br>
		 * Pipe error<br>
		 * <i>native declaration : /usr/include/limits.h:592</i>
		 */
		public static final int LIBUSB_ERROR_PIPE = -9;
		/**
		 * System call interrupted (perhaps due to signal)<br>
		 * System call interrupted (perhaps due to signal)<br>
		 * <i>native declaration : /usr/include/limits.h:595</i>
		 */
		public static final int LIBUSB_ERROR_INTERRUPTED = -10;
		/**
		 * Insufficient memory<br>
		 * Insufficient memory<br>
		 * <i>native declaration : /usr/include/limits.h:598</i>
		 */
		public static final int LIBUSB_ERROR_NO_MEM = -11;
		/**
		 * Operation not supported or unimplemented on this platform<br>
		 * Operation not supported or unimplemented on this platform<br>
		 * <i>native declaration : /usr/include/limits.h:601</i>
		 */
		public static final int LIBUSB_ERROR_NOT_SUPPORTED = -12;
		/**
		 * Other error<br>
		 * Other error<br>
		 * <i>native declaration : /usr/include/limits.h:604</i>
		 */
		public static final int LIBUSB_ERROR_OTHER = -99;
	}
	/**
	 * \ingroup asyncio<br>
	 * Transfer status codes<br>
	 * <i>native declaration : /usr/include/limits.h:609</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_status {
		/**
		 * Transfer completed without error. Note that this does not indicate<br>
		 * that the entire amount of requested data was transferred.<br>
		 * Transfer completed without error. Note that this does not indicate<br>
		 * that the entire amount of requested data was transferred.<br>
		 * <i>native declaration : /usr/include/limits.h:612</i>
		 */
		public static final int LIBUSB_TRANSFER_COMPLETED = 0;
		/**
		 * Transfer failed<br>
		 * Transfer failed<br>
		 * <i>native declaration : /usr/include/limits.h:615</i>
		 */
		public static final int LIBUSB_TRANSFER_ERROR = 1;
		/**
		 * Transfer timed out<br>
		 * Transfer timed out<br>
		 * <i>native declaration : /usr/include/limits.h:618</i>
		 */
		public static final int LIBUSB_TRANSFER_TIMED_OUT = 2;
		/**
		 * Transfer was cancelled<br>
		 * Transfer was cancelled<br>
		 * <i>native declaration : /usr/include/limits.h:621</i>
		 */
		public static final int LIBUSB_TRANSFER_CANCELLED = 3;
		/**
		 * For bulk/interrupt endpoints: halt condition detected (endpoint<br>
		 * stalled). For control endpoints: control request not supported.<br>
		 * For bulk/interrupt endpoints: halt condition detected (endpoint<br>
		 * stalled). For control endpoints: control request not supported.<br>
		 * <i>native declaration : /usr/include/limits.h:625</i>
		 */
		public static final int LIBUSB_TRANSFER_STALL = 4;
		/**
		 * Device was disconnected<br>
		 * Device was disconnected<br>
		 * <i>native declaration : /usr/include/limits.h:628</i>
		 */
		public static final int LIBUSB_TRANSFER_NO_DEVICE = 5;
		/**
		 * Device sent more data than requested<br>
		 * Device sent more data than requested<br>
		 * <i>native declaration : /usr/include/limits.h:631</i>
		 */
		public static final int LIBUSB_TRANSFER_OVERFLOW = 6;
	}
	/**
	 * \ingroup asyncio<br>
	 * libusb_transfer.flags values<br>
	 * <i>native declaration : /usr/include/limits.h:636</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_flags {
		/**
		 * Report short frames as errors<br>
		 * Report short frames as errors<br>
		 * <i>native declaration : /usr/include/limits.h:638</i>
		 */
		public static final int LIBUSB_TRANSFER_SHORT_NOT_OK = 1 << 0;
		/**
		 * Automatically free() transfer buffer during libusb_free_transfer()<br>
		 * Automatically free() transfer buffer during libusb_free_transfer()<br>
		 * <i>native declaration : /usr/include/limits.h:641</i>
		 */
		public static final int LIBUSB_TRANSFER_FREE_BUFFER = 1 << 1;
		/**
		 * Automatically call libusb_free_transfer() after callback returns.<br>
		 * If this flag is set, it is illegal to call libusb_free_transfer()<br>
		 * from your transfer callback, as this will result in a double-free<br>
		 * when this flag is acted upon.<br>
		 * Automatically call libusb_free_transfer() after callback returns.<br>
		 * If this flag is set, it is illegal to call libusb_free_transfer()<br>
		 * from your transfer callback, as this will result in a double-free<br>
		 * when this flag is acted upon.<br>
		 * <i>native declaration : /usr/include/limits.h:647</i>
		 */
		public static final int LIBUSB_TRANSFER_FREE_TRANSFER = 1 << 2;
	}
	public static final int LIBUSB_ISO_SYNC_TYPE_MASK = 12;
	public static final int LIBUSB_ISO_USAGE_TYPE_MASK = 48;
	public static final int LIBUSB_DT_DEVICE_SIZE = 18;
	public static final int LIBUSB_DT_CONFIG_SIZE = 9;
	public static final int LIBUSB_ENDPOINT_ADDRESS_MASK = 15;
	public static final int LIBUSB_TRANSFER_TYPE_MASK = 3;
	public static final int LIBUSB_DT_ENDPOINT_AUDIO_SIZE = 9;
	public static final int LIBUSB_ENDPOINT_DIR_MASK = 128;
	public static final int LIBUSB_DT_ENDPOINT_SIZE = 7;
	public static final int LIBUSB_DT_HUB_NONVAR_SIZE = 7;
	public static final int LIBUSB_DT_INTERFACE_SIZE = 9;
	/**
	 * \ingroup asyncio<br>
	 * Asynchronous transfer callback function type. When submitting asynchronous<br>
	 * transfers, you pass a pointer to a callback function of this type via the<br>
	 * \ref libusb_transfer::callback "callback" member of the libusb_transfer<br>
	 * structure. libusb will call this function later, when the transfer has<br>
	 * completed or failed. See \ref asyncio for more information.<br>
	 * \param transfer The libusb_transfer struct the callback function is being<br>
	 * notified about.<br>
	 * <i>native declaration : /usr/include/limits.h</i>
	 */
	public interface libusb_transfer_cb_fn extends com.sun.jna.Callback {
		void invoke(libusbone.libusb_transfer transfer);
	}
	/**
	 * Original signature : <code>int libusb_init(libusb_context**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:740</i>
	 */
	int libusb_init(com.sun.jna.ptr.PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_init(libusb_context**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:740</i>
	 */
	int libusb_init(libusbone.LibusboneLibrary.libusb_context ctx[]);
	/**
	 * Original signature : <code>void libusb_exit(libusb_context*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:741</i>
	 */
	void libusb_exit(libusbone.LibusboneLibrary.libusb_context ctx);
	/**
	 * Original signature : <code>void libusb_set_debug(libusb_context*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:742</i>
	 */
	void libusb_set_debug(libusbone.LibusboneLibrary.libusb_context ctx, int level);
	/**
	 * <i>native declaration : /usr/include/limits.h:744</i><br>
	 * Conversion Error : ssize_t
	 */
	/**
	 * Original signature : <code>void libusb_free_device_list(libusb_device**, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:746</i>
	 */
	void libusb_free_device_list(com.sun.jna.ptr.PointerByReference list, int unref_devices);
	/**
	 * Original signature : <code>void libusb_free_device_list(libusb_device**, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:746</i>
	 */
	void libusb_free_device_list(libusbone.LibusboneLibrary.libusb_device list[], int unref_devices);
	/**
	 * Original signature : <code>libusb_device* libusb_ref_device(libusb_device*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:747</i>
	 */
	libusbone.LibusboneLibrary.libusb_device libusb_ref_device(libusbone.LibusboneLibrary.libusb_device dev);
	/**
	 * Original signature : <code>void libusb_unref_device(libusb_device*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:748</i>
	 */
	void libusb_unref_device(libusbone.LibusboneLibrary.libusb_device dev);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:750</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_configuration(libusbone.LibusboneLibrary.libusb_device_handle, java.nio.IntBuffer)} and {@link #libusb_get_configuration(libusbone.LibusboneLibrary.libusb_device_handle, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int libusb_get_configuration(libusbone.LibusboneLibrary.libusb_device_handle dev, com.sun.jna.ptr.IntByReference config);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:750</i>
	 */
	int libusb_get_configuration(libusbone.LibusboneLibrary.libusb_device_handle dev, java.nio.IntBuffer config);
	/**
	 * Original signature : <code>int libusb_get_device_descriptor(libusb_device*, libusb_device_descriptor*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:751</i>
	 */
	int libusb_get_device_descriptor(libusbone.LibusboneLibrary.libusb_device dev, libusbone.libusb_device_descriptor desc);
	/**
	 * Original signature : <code>int libusb_get_active_config_descriptor(libusb_device*, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:753</i><br>
	 * @deprecated use the safer method {@link #libusb_get_active_config_descriptor(libusbone.LibusboneLibrary.libusb_device, libusbone.libusb_config_descriptor.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int libusb_get_active_config_descriptor(libusbone.LibusboneLibrary.libusb_device dev, com.sun.jna.ptr.PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_active_config_descriptor(libusb_device*, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:753</i>
	 */
	int libusb_get_active_config_descriptor(libusbone.LibusboneLibrary.libusb_device dev, libusbone.libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:755</i><br>
	 * @deprecated use the safer method {@link #libusb_get_config_descriptor(libusbone.LibusboneLibrary.libusb_device, byte, libusbone.libusb_config_descriptor.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int libusb_get_config_descriptor(libusbone.LibusboneLibrary.libusb_device dev, byte config_index, com.sun.jna.ptr.PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:755</i>
	 */
	int libusb_get_config_descriptor(libusbone.LibusboneLibrary.libusb_device dev, byte config_index, libusbone.libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor_by_value(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:757</i><br>
	 * @deprecated use the safer method {@link #libusb_get_config_descriptor_by_value(libusbone.LibusboneLibrary.libusb_device, byte, libusbone.libusb_config_descriptor.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int libusb_get_config_descriptor_by_value(libusbone.LibusboneLibrary.libusb_device dev, byte bConfigurationValue, com.sun.jna.ptr.PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor_by_value(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:757</i>
	 */
	int libusb_get_config_descriptor_by_value(libusbone.LibusboneLibrary.libusb_device dev, byte bConfigurationValue, libusbone.libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>void libusb_free_config_descriptor(libusb_config_descriptor*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:759</i>
	 */
	void libusb_free_config_descriptor(libusbone.libusb_config_descriptor config);
	/**
	 * Original signature : <code>uint8_t libusb_get_bus_number(libusb_device*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:760</i>
	 */
	byte libusb_get_bus_number(libusbone.LibusboneLibrary.libusb_device dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_device_address(libusb_device*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:761</i>
	 */
	byte libusb_get_device_address(libusbone.LibusboneLibrary.libusb_device dev);
	/**
	 * Original signature : <code>int libusb_get_max_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/limits.h:762</i>
	 */
	int libusb_get_max_packet_size(libusbone.LibusboneLibrary.libusb_device dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_iso_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/limits.h:763</i>
	 */
	int libusb_get_max_iso_packet_size(libusbone.LibusboneLibrary.libusb_device dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_open(libusb_device*, libusb_device_handle**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:765</i><br>
	 * @deprecated use the safer method {@link #libusb_open(libusbone.LibusboneLibrary.libusb_device, libusbone.LibusboneLibrary.libusb_device_handle[])} instead
	 */
	@java.lang.Deprecated
	int libusb_open(libusbone.LibusboneLibrary.libusb_device dev, com.sun.jna.ptr.PointerByReference handle);
	/**
	 * Original signature : <code>int libusb_open(libusb_device*, libusb_device_handle**)</code><br>
	 * <i>native declaration : /usr/include/limits.h:765</i>
	 */
	int libusb_open(libusbone.LibusboneLibrary.libusb_device dev, libusbone.LibusboneLibrary.libusb_device_handle handle[]);
	/**
	 * Original signature : <code>void libusb_close(libusb_device_handle*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:766</i>
	 */
	void libusb_close(libusbone.LibusboneLibrary.libusb_device_handle dev_handle);
	/**
	 * Original signature : <code>libusb_device* libusb_get_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:767</i>
	 */
	libusbone.LibusboneLibrary.libusb_device libusb_get_device(libusbone.LibusboneLibrary.libusb_device_handle dev_handle);
	/**
	 * Original signature : <code>int libusb_set_configuration(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:769</i>
	 */
	int libusb_set_configuration(libusbone.LibusboneLibrary.libusb_device_handle dev, int configuration);
	/**
	 * Original signature : <code>int libusb_claim_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:770</i>
	 */
	int libusb_claim_interface(libusbone.LibusboneLibrary.libusb_device_handle dev, int iface);
	/**
	 * Original signature : <code>int libusb_release_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:771</i>
	 */
	int libusb_release_interface(libusbone.LibusboneLibrary.libusb_device_handle dev, int iface);
	/**
	 * Original signature : <code>libusb_device_handle* libusb_open_device_with_vid_pid(libusb_context*, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/limits.h:773</i>
	 */
	libusbone.LibusboneLibrary.libusb_device_handle libusb_open_device_with_vid_pid(libusbone.LibusboneLibrary.libusb_context ctx, short vendor_id, short product_id);
	/**
	 * Original signature : <code>int libusb_set_interface_alt_setting(libusb_device_handle*, int, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:776</i>
	 */
	int libusb_set_interface_alt_setting(libusbone.LibusboneLibrary.libusb_device_handle dev, int interface_number, int alternate_setting);
	/**
	 * Original signature : <code>int libusb_clear_halt(libusb_device_handle*, unsigned char)</code><br>
	 * <i>native declaration : /usr/include/limits.h:778</i>
	 */
	int libusb_clear_halt(libusbone.LibusboneLibrary.libusb_device_handle dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_reset_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : /usr/include/limits.h:779</i>
	 */
	int libusb_reset_device(libusbone.LibusboneLibrary.libusb_device_handle dev);
	/**
	 * Original signature : <code>int libusb_kernel_driver_active(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:781</i>
	 */
	int libusb_kernel_driver_active(libusbone.LibusboneLibrary.libusb_device_handle dev, int interface_);
	/**
	 * Original signature : <code>int libusb_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:782</i>
	 */
	int libusb_detach_kernel_driver(libusbone.LibusboneLibrary.libusb_device_handle dev, int interface_);
	/**
	 * Original signature : <code>int libusb_attach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : /usr/include/limits.h:783</i>
	 */
	int libusb_attach_kernel_driver(libusbone.LibusboneLibrary.libusb_device_handle dev, int interface_);
	/// Pointer to unknown (opaque) type
	public static class libusb_device extends com.sun.jna.PointerType {
		public libusb_device(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public libusb_device() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class libusb_context extends com.sun.jna.PointerType {
		public libusb_context(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public libusb_context() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class libusb_device_handle extends com.sun.jna.PointerType {
		public libusb_device_handle(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public libusb_device_handle() {
			super();
		}
	}
}
