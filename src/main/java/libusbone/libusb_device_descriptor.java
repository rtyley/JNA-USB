package libusbone;
/**
 * \ingroup desc<br>
 * A structure representing the standard USB device descriptor. This<br>
 * descriptor is documented in section 9.6.1 of the USB 2.0 specification.<br>
 * All multiple-byte fields are represented in host-endian format.<br>
 * <i>native declaration : /usr/include/limits.h:376</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class libusb_device_descriptor extends com.sun.jna.Structure {
	/// Size of this descriptor (in bytes)
	public byte bLength;
	/**
	 * Descriptor type. Will have value<br>
	 * \ref libusb_descriptor_type::LIBUSB_DT_DEVICE LIBUSB_DT_DEVICE in this<br>
	 * context.
	 */
	public byte bDescriptorType;
	/**
	 * USB specification release number in binary-coded decimal. A value of<br>
	 * 0x0200 indicates USB 2.0, 0x0110 indicates USB 1.1, etc.
	 */
	public short bcdUSB;
	/// USB-IF class code for the device. See \ref libusb_class_code.
	public byte bDeviceClass;
	/**
	 * USB-IF subclass code for the device, qualified by the bDeviceClass<br>
	 * value
	 */
	public byte bDeviceSubClass;
	/**
	 * USB-IF protocol code for the device, qualified by the bDeviceClass and<br>
	 * bDeviceSubClass values
	 */
	public byte bDeviceProtocol;
	/// Maximum packet size for endpoint 0
	public byte bMaxPacketSize0;
	/// USB-IF vendor ID
	public short idVendor;
	/// USB-IF product ID
	public short idProduct;
	/// Device release number in binary-coded decimal
	public short bcdDevice;
	/// Index of string descriptor describing manufacturer
	public byte iManufacturer;
	/// Index of string descriptor describing product
	public byte iProduct;
	/// Index of string descriptor containing device serial number
	public byte iSerialNumber;
	/// Number of possible configurations
	public byte bNumConfigurations;
	public libusb_device_descriptor() {
		super();
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected libusb_device_descriptor newInstance() {
		libusb_device_descriptor s = new libusb_device_descriptor();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends libusb_device_descriptor implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends libusb_device_descriptor implements com.sun.jna.Structure.ByValue {}
}
