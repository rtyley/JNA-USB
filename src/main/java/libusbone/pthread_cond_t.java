package libusbone;
/**
 * <i>native declaration : /usr/include/bits/pthreadtypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pthread_cond_t extends com.sun.jna.Union {
	/// C type : __data_struct
	public __data_struct __data;
	/// C type : char[48]
	public byte[] __size = new byte[(48)];
	public long __align;
	/// <i>native declaration : /usr/include/bits/pthreadtypes.h:116</i>
	public static class __data_struct extends com.sun.jna.Structure {
		public int __lock;
		public int __futex;
		public long __total_seq;
		public long __wakeup_seq;
		public long __woken_seq;
		/// C type : void*
		public com.sun.jna.Pointer __mutex;
		public int __nwaiters;
		public int __broadcast_seq;
		public __data_struct() {
			super();
		}
		/// @param __mutex C type : void*
		public __data_struct(int __lock, int __futex, long __total_seq, long __wakeup_seq, long __woken_seq, com.sun.jna.Pointer __mutex, int __nwaiters, int __broadcast_seq) {
			super();
			this.__lock = __lock;
			this.__futex = __futex;
			this.__total_seq = __total_seq;
			this.__wakeup_seq = __wakeup_seq;
			this.__woken_seq = __woken_seq;
			this.__mutex = __mutex;
			this.__nwaiters = __nwaiters;
			this.__broadcast_seq = __broadcast_seq;
		}
		protected ByReference newByReference() {
			ByReference s = new ByReference();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		protected ByValue newByValue() {
			ByValue s = new ByValue();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		protected __data_struct newInstance() {
			__data_struct s = new __data_struct();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		public static class ByReference extends __data_struct implements com.sun.jna.Structure.ByReference {}
		public static class ByValue extends __data_struct implements com.sun.jna.Structure.ByValue {}
	}
	public pthread_cond_t() {
		super();
	}
	public pthread_cond_t(long __align) {
		super();
		this.__align = __align;
		setType(java.lang.Long.TYPE);
	}
	/// @param __data C type : __data_struct
	public pthread_cond_t(__data_struct __data) {
		super();
		this.__data = __data;
		setType(__data_struct.class);
	}
	/// @param __size C type : char[48]
	public pthread_cond_t(byte __size[]) {
		super();
		if (__size.length != this.__size.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.__size = __size;
		setType(byte[].class);
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected pthread_cond_t newInstance() {
		pthread_cond_t s = new pthread_cond_t();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends pthread_cond_t implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends pthread_cond_t implements com.sun.jna.Structure.ByValue {}
}
