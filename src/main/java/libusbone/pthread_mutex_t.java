package libusbone;
/**
 * <i>native declaration : /usr/include/bits/pthreadtypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pthread_mutex_t extends com.sun.jna.Union {
	/// C type : __pthread_mutex_s
	public __pthread_mutex_s __data;
	/// C type : char[24]
	public byte[] __size = new byte[(24)];
	public int __align;
	/// <i>native declaration : /usr/include/bits/pthreadtypes.h:77</i>
	public static class __pthread_mutex_s extends com.sun.jna.Structure {
		public int __lock;
		public int __count;
		public int __owner;
		/**
		 * KIND must stay at this position in the structure to maintain<br>
		 * binary compatibility.
		 */
		public int __kind;
		public int __nusers;
		public __pthread_mutex_s() {
			super();
		}
		/**
		 * @param __kind KIND must stay at this position in the structure to maintain<br>
		 * binary compatibility.
		 */
		public __pthread_mutex_s(int __lock, int __count, int __owner, int __kind, int __nusers) {
			super();
			this.__lock = __lock;
			this.__count = __count;
			this.__owner = __owner;
			this.__kind = __kind;
			this.__nusers = __nusers;
		}
		protected ByReference newByReference() {
			ByReference s = new ByReference();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		protected ByValue newByValue() {
			ByValue s = new ByValue();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		protected __pthread_mutex_s newInstance() {
			__pthread_mutex_s s = new __pthread_mutex_s();
			s.useMemory(getPointer());
			write();
			s.read();
			return s;
		}
		public static class ByReference extends __pthread_mutex_s implements com.sun.jna.Structure.ByReference {}
		public static class ByValue extends __pthread_mutex_s implements com.sun.jna.Structure.ByValue {}
	}
	public pthread_mutex_t() {
		super();
	}
	public pthread_mutex_t(int __align) {
		super();
		this.__align = __align;
		setType(java.lang.Integer.TYPE);
	}
	/// @param __data C type : __pthread_mutex_s
	public pthread_mutex_t(__pthread_mutex_s __data) {
		super();
		this.__data = __data;
		setType(__pthread_mutex_s.class);
	}
	/// @param __size C type : char[24]
	public pthread_mutex_t(byte __size[]) {
		super();
		if (__size.length != this.__size.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.__size = __size;
		setType(byte[].class);
	}
	protected ByReference newByReference() {
		ByReference s = new ByReference();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected ByValue newByValue() {
		ByValue s = new ByValue();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	protected pthread_mutex_t newInstance() {
		pthread_mutex_t s = new pthread_mutex_t();
		s.useMemory(getPointer());
		write();
		s.read();
		return s;
	}
	public static class ByReference extends pthread_mutex_t implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends pthread_mutex_t implements com.sun.jna.Structure.ByValue {}
}
